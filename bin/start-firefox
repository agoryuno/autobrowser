#!/bin/bash

# script: start-firefox

# A function to extract the path to the default Firefox profile
get_default_profile_path() {
    awk -F "=" '
    /^\[Profile/ {p=1; d=0; path=""}
    /^Default=1/ && p {d=1}
    /^Path=/ && p {path=$2} 
    d && path {print path; exit}
    ' /root/.mozilla/firefox/profiles.ini
}


# Get the base directory, which is the project's root
base_dir=$(dirname $(dirname $(realpath "$0")))
#script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

echo "start-firefox: base_dir = $base_dir"

config_file="config.ini"
while getopts "cf:" opt; do
  case ${opt} in
    f )
      config_file=$OPTARG
      ;;
    \? )
      echo "Usage: $0 [-f config_file (relative to "\
           "the project's root directory)]"
      exit 1
      ;;
  esac
done

# Change the working directory to the script's directory
#cd "$base_dir"

# Read SERVER_HOST, SERVER_PORT, and TOKEN_FILE from the config.ini file
config_file="$base_dir/$config_file"

server_host=$(grep "^SERVER_HOST" "$config_file" | awk -F'=' '{print $2}' | tr -d ' ')
server_port=$(grep "^SERVER_PORT" "$config_file" | awk -F'=' '{print $2}' | tr -d ' ')
token_file=$(grep "^TOKEN_FILE" "$config_file" | awk -F'=' '{print $2}' | tr -d ' ')
token_file="$base_dir/$token_file"

# Check if the token file exists, if not, create it using the 'make-token' script
#if [ ! -f "$token_file" ]; then
#  echo "start-firefox: Token file not found. Creating a new one.."
#  $base_dir/bin/make-token "$config_file"
#fi

# Create a new token
echo "Wrtiting token to $token_file"
$base_dir/bin/make-token "$config_file"

flask_token=$(cat $token_file)

# Start the Flask app in the background
cd $base_dir/browser/server
python app.py $token_file $config_file &

# Change the working directory back to the script's directory
cd $script_dir

echo "start-firefox: token file path = $token_file"

echo "start-firefox: Flask app starting with token = $flask_token"

# Get the process ID of the Flask app
flask_pid=$!

echo "start-firefox: Flask PID = $flask_pid"

# Set a timeout (in tenths of a second) for waiting for the Flask app to start
timeout=100

# Wait for the Flask app to start or the timeout to expire
elapsed_time=0
while ! nc -z "$server_host" "$server_port" && [ $elapsed_time -lt $timeout ]; do
  sleep 0.1
  elapsed_time=$(($elapsed_time + 1))
done

# Check if the Flask app started before the timeout expired
if [ $elapsed_time -lt $timeout ]; then
  echo "start-firefox: Flask app is running. Starting Firefox..."
  cd "$base_dir"

  urlencode() {
    printf %s "$1" | od -An -tx1 -v -w${#1} | tr ' ' %
  }

  enc_token=$(urlencode "$flask_token")

  # Execute the firefox/firefox command
  echo "start-firefox:  $base_dir/bin/firefox/"

  echo "start-firefox: profile directory = /root/.mozilla/firefox/$(get_default_profile_path)"

  $base_dir/bin/firefox/firefox \
      -override "$base_dir/bin/firefox/override.ini" \
      -profile "/root/.mozilla/firefox/$(get_default_profile_path)" \
      --no-remote "https://$server_host:$server_port/auth?token=$enc_token" &

  # Wait for the Firefox process to exit
  wait $!

  # Kill the Flask app
  kill $flask_pid
else
  echo "start-firefox: Flask app did not start within the specified timeout"
  # Kill the Flask app
  kill $flask_pid
  exit 1
fi
