#!/bin/bash

CONTAINER_NAME=$1
IMAGE_NAME="autobrowser"

# Check if the image exists locally
if [ "$(docker images -q $IMAGE_NAME)" ]; then
    echo "Image exists locally."
else
    echo "Image does not exist locally. Attempting to pull..."
    # Try to pull the image
    docker pull $IMAGE_NAME

    if [ $? -eq 0 ]; then
        echo "Image pulled successfully."
    else
        echo "Image could not be pulled."
        exit 1
    fi
fi

# Check if a container name was supplied
if [ -z "$CONTAINER_NAME" ]; then
    echo "No container name supplied. Checking for existing containers for the image..."

    # Get the name of the first running container that uses the image
    CONTAINER_NAME=$(docker ps -a --format '{{.Names}}' --filter ancestor=$IMAGE_NAME | head -n 1)

    # If no container is found, use a default name
    if [ -z "$CONTAINER_NAME" ]; then
        echo "No existing container found for the image. Using default container name..."
        CONTAINER_NAME="autobrowser_container"
    fi
fi

# Check if the container already exists
if [ "$(docker ps -a -q -f name=$CONTAINER_NAME)" ]; then
    echo "Container $CONTAINER_NAME already exists."
    echo "Starting the container if not already running..."
    docker start $CONTAINER_NAME
else
    echo "Container does not exist. Creating now..."
    docker run -d --name $CONTAINER_NAME $IMAGE_NAME
fi

# Check if the container is running, with a maximum number of retries
MAX_RETRIES=10
RETRIES=0
docker ps
while [ "$(docker ps -q -f name=$CONTAINER_NAME)" == "" ] && [ $RETRIES -lt $MAX_RETRIES ]; do
    echo "test"
    
    echo "Waiting for the container to start..."
    sleep 1
    RETRIES=$((RETRIES+1))
done

if [ $RETRIES -eq $MAX_RETRIES ]; then
    echo "Failed to start the container after $MAX_RETRIES attempts."
    exit 1
fi

sleep 5

echo "Container $CONTAINER_NAME is running."
echo "Reading file from the container..."
docker exec -it $CONTAINER_NAME cat /app/token.txt > token.txt
